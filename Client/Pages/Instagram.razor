@page "/Instagram"
@inject AntiBotIO.Client.Shared.Models.PostsDTO posts
@inject AntiBotIO.Client.Shared.Models.Post MPost

@inject HttpClient httpClient
@inject Shared.Models.JSONModel jsonModel

<h3>Instagram</h3>
<EditForm OnSubmit="@GetPosts" Model="@posts">
    <InputText @bind-Value="posts.UserName" />
    <InputNumber @bind-Value="posts.PostCount" />
    <button type="submit">Get Posts</button>
</EditForm>


@if (L_posts.Count > 0)
{
    @foreach (var item in L_posts)
    {
        <div class="card" style="width: 18rem;">
            <img class="card-img-top" src="https://via.placeholder.com/150" alt="Card image cap">
            <div class="card-body">
                <h5 class="card-title">@item.Caption</h5>
                <p class="card-text">Post Id : @item.Id -- Post Short Code : @item.ShortCode </p>
                <p class="card-text">Coment Count : @item.CommentCount -- Post Date : @item.Date</p>
            </div>
        </div>
    }
}
else if (!string.IsNullOrEmpty(apiResponse))
{
    <p>No posts found.</p>
}

/**
 * <summary>
 * This method sends a request to the Instagram API to get the posts of a user and returns a list of Post objects.
 * </summary>
 * <returns>
 * A list of Post objects.
 * </returns>
 */
@code {
    private string apiResponse;
    List<Post> L_posts = new List<Post>();
    public async Task<List<Post>> GetPosts()
{
    Console.WriteLine("GetPosts method called"); // Add this line

    // Kullanıcının girdiği verileri alın
    var userName = posts.UserName;
    var postCount = posts.PostCount;

    // Web API'ye gönderilecek verileri oluşturun
    var request = await httpClient.GetAsync($"api/Instagram/GetPosts?userId={userName}");

    // Web API'ye istek gönderin
    if (request.IsSuccessStatusCode)
    {
        // Web API'den gelen yanıtı alın
        apiResponse = await request.Content.ReadAsStringAsync();

        var jsonResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<Shared.Models.JSONModel>(apiResponse);

        if (postCount > jsonResponse.data.items.Count)
        {
            postCount = jsonResponse.data.items.Count;
        }

        for (int i = 0; i < postCount && i < jsonResponse.data.items.Count; i++)
        {
            var item = jsonResponse.data.items[i];

            // Extract post data
            string postCaption = string.Empty;
            if (item.captions.items.Count > 0)
            {
                postCaption = item.captions.items[0].ToString();
            }
            string commentCount = item.comments.count.ToString();
            string postId = item.id.ToString();
            string shortCode = item.code.ToString();
            DateTime postDate = DateTimeOffset.FromUnixTimeSeconds(item.taken_at_timestamp).DateTime;

            // Create object to hold data
            Post PostData = new Post();
            PostData.Caption = postCaption;
            PostData.CommentCount = commentCount;
            PostData.Id = postId;
            PostData.ShortCode = shortCode;
            PostData.Date = postDate;

            // Add to list
            L_posts.Add(PostData);
        }
        return L_posts;
    }
    else
    {
        // Handle the case where the request fails
        return null;
    }
}
}
